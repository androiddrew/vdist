#!/usr/bin/env python

import os
import sys
import traceback
if sys.version_info.major < 3:
    import ci_tools as tools
else:
    from ci_scripts import ci_tools as tools

APT_SOURCES_FILEPATH = "/etc/apt/sources.list"
BINTRAY_VDIST_CONFIG_STRING = "deb [trusted=yes] " \
                              "https://dl.bintray.com/dante-signal31/deb " \
                              "generic main\n"


def get_current_interpreter_version():
    version_string = "{0}.{1}".format(sys.version_info.major,
                                      sys.version_info.minor)
    return version_string


def get_current_tag():
    current_tag = os.getenv("TEST_TAG")
    return current_tag


def install_dependencies():
    print("Installing dependencies for Bintray...")
    tools.run_console_command("sudo apt-get update")
    tools.run_console_command("sudo apt-get install apt-transport-https")
    print("Dependencies for Bintray installed.")
    print("Installing docker...")
    tools.run_console_command("sudo apt-get install docker.io")
    print("Docker installed")


def install_bintray_key():
    print("Adding Bintray pgp key...")
    tools.run_console_command("sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 379CE192D401AB61")
    print("Bintray pgp key added.")


def check_bintray_in_apt_sources():
    if _included_in_apt_sources(BINTRAY_VDIST_CONFIG_STRING):
        print("Bintray already in apt sources list.")
    else:
        print("Bintray not in apt sources list. Including it...")
        _include_apt_source(BINTRAY_VDIST_CONFIG_STRING)
        print("Bintray is now included in apt sources list.")


def _included_in_apt_sources(source_url,
                             apt_filepath=APT_SOURCES_FILEPATH):
    with open(apt_filepath, mode="r") as apt_file:
        return True if source_url in apt_file else False


def _include_apt_source(source_url,
                        apt_filepath=APT_SOURCES_FILEPATH):
    with open(apt_filepath, mode="a") as apt_file:
        bintray_source_entry = "\n\n{0}".format(source_url)
        apt_file.write(bintray_source_entry)


def install_vdist():
    print("Installing vdist package from Bintray...")
    # tools.run_console_command("sudo apt-get update")
    # tools.run_console_command("sudo apt-get install vdist")
    tools.run_console_command("pip install vdist")
    print("vdist installed.")


def build_packages():
    print("About to run building command from {0}".format(os.getcwd()))
    print("Building system packages...")
    tools.run_console_command("vdist batch packaging/vdist_build.cnf")
    print("System packages built.")


if __name__ == '__main__':
    try:
        print("This job is going to build vdist system packages.")
        # I'd like to install vdist from an apt repository because I feel
        # a deb package let me do a more proper dependency management. Problem
        # is that linux version that Travis runs is rather old and uses a
        # install_dependencies()
        # install_bintray_key()
        # check_bintray_in_apt_sources()
        install_vdist()
        build_packages()
    except Exception:
        traceback.print_stack()
        sys.exit(1)
    else:
        sys.exit(0)


